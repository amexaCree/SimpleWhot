
import java.util.ArrayList;
import java.util.Hashtable;

public class ComputerPlayerEdit extends Player {
    boolean isHandMapped = false;
    private ArrayList<String> availableSetLabels = new ArrayList<String>();
    private ArrayList<CardSet> cardSets = new ArrayList<CardSet>();
    private Hashtable<String, CardSet> cardSetMap = new Hashtable<String, CardSet>();

    public ComputerPlayerEdit() {
        super();
        this.setAsComputer();
        this.createCardSetMap();
    }

    public void pickCard(WhotCard cardPicked) {
        if (isHandMapped) { isHandMapped = false; }
        super.pickCard(cardPicked);
    }

    public WhotCard playCard(int cardOption) {
        removeRef(cardOption);
        return super.playCard(cardOption);
    }

    public int decideMove(WhotCard centreCard, WhotCard.Suit nextSuit) {
        int move = 0;
        move = checkHand(centreCard.getSuit(), centreCard.getRank(), centreCard.hasSpecialAction(), nextSuit);
        return move;
    }

    ArrayList<int> wildCards = new ArrayList<int>();
    ArrayList<int> suitMatches = new ArrayList<int>();
    ArrayList<int> rankMatches = new ArrayList<int>();
    ArrayList<int> suitMatchSpecialCards = new ArrayList<int>();
    int SUITSPECIALCARDS = 0;
    String HANDSTATE = "";
    ArrayList<Integer> specialActionChain = new ArrayList<Integer>();
    //ArrayList<Integer> wildcardIndices = new ArrayList<Integer>();

    private int checkHand(WhotCard.Suit centerSuit, int centerRank, boolean specialRank, WhotCard.Suit nextSuit) {
        ArrayList<WhotCard> computerHand = getHand();
        WhotCard.Suit suitToMatch = centerSuit;
        int rankToMatch = centerRank;
        if (nextSuit != null) { suitToMatch = nextSuit; rankToMatch = 0;}
        Boolean SPECIALRANK = Settings.specialActions.get(rankToMatch) != null;

        for (WhotCard card: computerHand) {
            //if (card.hasSpecialAction()) { SPECIALCARDS++; }
            if (card.getSpecialAction() == WhotCard.SpecialAction.WILDCARD) {
                //WILDCARDS++;
                wildCards.add(computerHand.indexOf(card));
            }
            //if (card.getSuit() == suitToMatch || card.getRank() == rankToMatch) { CENTERMATCH++; }
            if (card.getSuit() == suitToMatch) {
                //SUITMATCH++;
                suitMatches.add(computerHand.indexOf(card));

                if (card.hasSpecialAction()) {
                    suitMatchSpecialCards.add(computerHand.indexOf(card));
                }

            }
            if (card.getRank() == rankToMatch) {
                //RANKMATCH++;
                rankMatches.add(computerHand.indexOf(card));
            }
        }


        if (suitMatches.size() == 0 && rankMatches.size() == 0 ) {
              if (wildCards.size() == 0) {
                  return 0;
              }
              else {
                  return wildCards.get(0);
              }
        }

        if (suitMatches.size() == 1 && rankMatches.size() == 0 ) {

        }

        if (suitMatches.size() > 1 && rankMatches.size() == 0 ) {

        }

        if (suitMatches.size() == 0 && rankMatches.size() == 1 ) {

        }

        if (suitMatches.size() == 0 && rankMatches.size() > 1 ) {

        }

        if (suitMatches.size() == 1 && rankMatches.size() == 1 ) {
            ArrayList<int> rankMatchSuitMatches = new ArrayList<int>();
            ArrayList<int> rankMatchSuitMatchesSpecialCards = new ArrayList<int>();
            for (int i=0; i<computerHand.size(); i++) {
                if (!suitMatches.contains(i) && !rankMatches.contains(i)) {
                    if (computerHand.get(rankMatches.get(0)).getSuit() == computerHand.get(i).getSuit()) {
                        rankMatchSuitMatches.add(i);
                        if (computerHand.get(i).hasSpecialAction()) {
                            rankMatchSuitMatchesSpecialCards.add(i);
                        }
                    }
                }
            }

            if (rankMatchSuitMatchesSpecialCards.size() > suitMatchSpecialCards.size()) {
                return rankMatches.get(0);
            }
            else {
                return 0;
            }

        }

        if (suitMatches.size() > 1 && rankMatches.size() == 1 ) {

        }

        if (suitMatches.size() == 1 && rankMatches.size() > 1 ) {

        }

        if (suitMatches.size() > 1 && rankMatches.size() > 1 ) {

        }

//        if (CENTERMATCH == 0) {
//            if (WILDCARDS == 0) {
//               return 0;
//            }
//            else if (WILDCARDS == 1) {
//                return wildcardIndices.get(0);
//            }
//            else {
//                //chainBuilder();
//                return wildcardIndices.get(0);
//            }
//        }
//        else {
//            if (SUITMATCH > 0 &&  RANKMATCH == 0) {
//
//            }
//            else if (RANKMATCH > 0 && SUITMATCH == 0) {
//                 if (RANKMATCH == 1) {
//                     if (SPECIALRANK) {
//
//                         //chainBuilder();
//                         return specialActionChain.get(0);
//                     }
//                 }
//                 else {
//
//                 }
//            }
//            else {
//
//            }
//        }
       return 0;
    }

    private int wildCardSuitPicker() {
     return 1;
    }

    private int moveCalculator() {
        return 0;
    }

    private ArrayList<Integer> buildSpecialActionChain(int startIndex) {
        int pointer = 0;
        ArrayList<Integer> specialActionChain = new ArrayList<Integer>();
        specialActionChain.add(startIndex);
        ArrayList<WhotCard> computerHand = getHand();

        while (true) {
             int currentIndex = specialActionChain.get(pointer);
             WhotCard.Suit suitToLink = computerHand.get(currentIndex).getSuit();
             int rankToLink = computerHand.get(currentIndex).getRank();
             ArrayList<Integer> possibleSuitPlays = new ArrayList<Integer>();
             ArrayList<Integer> possibleRankPlays = new ArrayList<Integer>();

            for (int i = 0; i < computerHand.size(); i++) {

                if (computerHand.get(i).getSuit() == suitToLink) {
                    possibleSuitPlays.add(i);
                }
                if (computerHand.get(i).getRank() == rankToLink) {
                    possibleRankPlays.add(i);
                }
            }
        }


    }

    private void removeRef(int index) {
        WhotCard card = this.getCard(index);
        WhotCard.Suit suit = card.getSuit();
        int rank = card.getRank();
    }

    private void mapHand() {
        ArrayList<WhotCard> computerHand = getHand();
        for(WhotCard card: computerHand) {
            int index = computerHand.indexOf(card);
            CardSet.CardReference ref = new CardSet.CardReference(card, index);
            String rank = ""+card.getRank();
            String suit = card.getSuit().toString();
            updateCardSet(rank, ref);
            updateCardSet(suit, ref);
        }

        isHandMapped = true;
    }

    private void updateCardSet(String label, CardSet.CardReference ref) {
        CardSet cardset = getCardSet(label);
        cardset.addCardRef(ref);
        cardSetMap.replace(label, cardset);
    }

//    private void removeRefCardSet(String label, index) {
//        CardSet cardset = getCardSet(label);
//        cardset.removeCardRef(index);
//        cardSetMap.replace(label, cardset);
//    }

    private CardSet getCardSet(String label) {
        return cardSetMap.get(label);
    }

    private void createCardSetMap() {
        cardSetMap.put("1", new CardSet.RankSet(1));
        cardSetMap.put("2", new CardSet.RankSet(2));
        cardSetMap.put("3", new CardSet.RankSet(3));
        cardSetMap.put("4", new CardSet.RankSet(4));
        cardSetMap.put("5", new CardSet.RankSet(5));
        cardSetMap.put("7", new CardSet.RankSet(7));
        cardSetMap.put("8", new CardSet.RankSet(8));
        cardSetMap.put("10", new CardSet.RankSet(10));
        cardSetMap.put("11", new CardSet.RankSet(11));
        cardSetMap.put("12", new CardSet.RankSet(12));
        cardSetMap.put("13", new CardSet.RankSet(13));
        cardSetMap.put("14", new CardSet.RankSet(14));
        cardSetMap.put("WHOT", new CardSet.SuitSet(WhotCard.Suit.WHOT));
        cardSetMap.put("CIRCLE", new CardSet.SuitSet(WhotCard.Suit.CIRCLE));
        cardSetMap.put("TRIANGLE", new CardSet.SuitSet(WhotCard.Suit.TRIANGLE));
        cardSetMap.put("CROSS", new CardSet.SuitSet(WhotCard.Suit.CROSS));
        cardSetMap.put("SQUARE", new CardSet.SuitSet(WhotCard.Suit.SQUARE));
        cardSetMap.put("STAR", new CardSet.SuitSet(WhotCard.Suit.STAR));
    }
}
